- all the logging client really needs is a log level for each logger
- formatters and fancy handlers are only needed on the logging server

use custom logging.Manager which uses a custom LoggerClass.
On instantiation LoggerClass get's log level from logging server and
subscribes to publisher to get future updates.

--------------------------------------------------------------------------------

how could config management for logger look like?
- keep logging config as global dictConfig
- write a client app, ala circusctl, to change logger properties on the fly
- notify clients about changes


--------------------------------------------------------------------------------
logging_config = {
   'version': 1,
   'disable_existing_loggers': False,
   'formatters': {
       'simple': {
           'format': '%(asctime)s %(name)s %(levelname)s: %(message)s',
           'datefmt': '%Y-%m-%d %H:%M:%S',
       },
   },
   'handlers': {
       'console': {
           'class': 'logging.StreamHandler',
           'level': 'NOTSET',
           'formatter': 'simple',
           'stream': 'ext://sys.stderr',
       },
      'zmq': {
          'class': 'zerolog.ZmqHandler',
          'level': 'NOTSET',
          'uri': uri,
      },
   },
   'root': {
       'level': 'ERROR',
       'handlers': ['console'],
   },
   'loggers': {
      'dhcp': {
          'level': 'INFO',
          'handlers': ['zmq'],
      },
   },
}




loggers = {
   'dhcp': {
      'level': 'INFO',
      'handler': {
          'class': 'zerolog.ZmqHandler',
          'level': 'NOTSET',
          'uri': 'tcp://127.0.0.42:6661',
      },
   }
}



loggers.dhcp




zerolog.getLogger(name)
- checks if there is a config for name on the logconfigserver
- if not, get's the root logger config

--------------------------------------------------------------------------------

# @see http://zguide.zeromq.org/py:rtreq
_socket = context.socket(zmq.REQ)
_socket.connect('tcp://127.0.0.42:6660')
_socket.send('update')
config = _socket.recv_json()
print('{0!r}'.format(config))
