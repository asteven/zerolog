- all the config a logging client really needs for each logger is:
   - a log level
   - weither a logger should propagate or not
- formatters and fancy handlers are only needed on the logging server
- by default only the root logger gets a zerolog handler
- if a logger is configured to not propagate, it needs to have it's own zerolog
   handler as otherwise we never get its log messages.

--------------------------------------------------------------------------------

use custom logging.Manager. When a logger is created it get's its log level from
logging server and subscribes to publisher to get future updates.

--------------------------------------------------------------------------------

how could config management for logger look like?
- keep logging config as global dict, e.g.
loggers = {
   'dhcp': {
      'level': 'INFO',
      'handler': {
          'class': 'zerolog.ZmqHandler',
          'level': 'NOTSET',
          'uri': 'tcp://127.0.0.42:6661',
      },
   }
}
- write a client app, ala circusctl, to change logger properties on the fly
- notify clients about changes


--------------------------------------------------------------------------------
- usage with standard python logging
logging_config = {
   'version': 1,
   'disable_existing_loggers': False,
   'formatters': {
       'simple': {
           'format': '%(asctime)s %(name)s %(levelname)s: %(message)s',
           'datefmt': '%Y-%m-%d %H:%M:%S',
       },
   },
   'handlers': {
       'console': {
           'class': 'logging.StreamHandler',
           'level': 'NOTSET',
           'formatter': 'simple',
           'stream': 'ext://sys.stderr',
       },
      'zmq': {
          'class': 'zerolog.ZmqHandler',
          'level': 'NOTSET',
          'uri': 'tcp://127.0.0.42:6660',
      },
   },
   'root': {
       'level': 'ERROR',
       'handlers': ['console'],
   },
   'loggers': {
      'dhcp': {
          'level': 'INFO',
          'handlers': ['zmq'],
      },
   },
}
import logging.config
logging.config.dictConfig(logging_config)

- usage of advanced features like auto configuration
import zerolog
zerolog.configure(endpoints={
   'collect': 'ipc:///tmp/zerolog/collect',
   'publish': 'ipc:///tmp/zerolog/publish',
})
import logging
logger = logging.getLogger('foobar')
logger.info('whatever')

- or using default endpoints
import zerolog
logger = zerolog.getLogger('foobar')
logger.info('whatever')




--------------------------------------------------------------------------------

# @see http://zguide.zeromq.org/py:rtreq
import zmq
import json
context = zmq.Context.instance()
_socket = context.socket(zmq.DEALER)
_socket.connect('tcp://127.0.0.42:6660')

request = { 'id': 'foobar', 'command': 'list'}
_socket.send_json(request)
response = _socket.recv_json()
print('{0!r}'.format(response))

request = { 'id': 'foobar', 'command': 'get', 'args': {'name': 'zerolog'}}
_socket.send_json(request)
response = _socket.recv_json()
print('{0!r}'.format(response))

request = { 'id': 'foobar', 'command': 'set', 'args': {'name': '__main__', 'config': {'level': 'ERROR'}}}
_socket.send_json(request)
response = _socket.recv_json()
print('{0!r}'.format(response))




--------------------------------------------------------------------------------

_socket.send_multipart(['list'])
reply = _socket.recv_json()
print('{0!r}'.format(reply))

_socket.send_multipart(['get', 'zerolog'])
config = _socket.recv_json()
print('{0!r}'.format(config))

config['level'] = 'DEBUG'
_socket.send_multipart(['set', 'zerolog', json.dumps(config)])
config = _socket.recv_json()
print('{0!r}'.format(config))

config['level'] = 'ERROR'
_socket.send_multipart(['set', 'zerolog', json.dumps(config)])
config = _socket.recv_json()
print('{0!r}'.format(config))

--------------------------------------------------------------------------------

